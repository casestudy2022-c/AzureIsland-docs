openapi: 3.0.0
x-stoplight:
  id: wn6i4fn27mv6j
info:
  title: AzureIsland-api
  version: '1.0'
  description: ''
servers:
  - url: 'http://localhost:9000'
paths:
  '/users/{userId}':
    parameters:
      - schema:
          type: integer
        name: userId
        in: path
        required: true
        description: Id of an existing user.
    get:
      summary: Get User Info by User ID
      tags:
        - user
      responses:
        '200':
          description: OK
        '404':
          description: User Not Found
      operationId: get-users-userId
      description: |-
        Azureアイランドユーザ情報取得
        優先度低　未定義
      parameters: []
      security:
        - Authorization: []
  /user:
    post:
      summary: Create New User
      operationId: post-user
      responses:
        '200':
          description: Missing Required Information
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                dateOfBirth:
                  type: string
                  format: date
              required:
                - firstName
                - lastName
                - email
                - dateOfBirth
            examples:
              Create User Bob Fellow:
                value:
                  firstName: Bob
                  lastName: Fellow
                  email: bob.fellow@gmail.com
                  dateOfBirth: '1996-08-24'
        description: Post the necessary fields for the API to create a new user.
      description: Create a new user.
  /buildings:
    get:
      summary: get-buildings
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    step_id:
                      type: string
                    name:
                      type: string
                    description:
                      type: string
                    rank:
                      type: object
                      properties:
                        rank:
                          type: string
                        image_address:
                          type: string
              examples:
                example-1:
                  value:
                    - id: string
                      step_id: string
                      name: string
                      description: string
                      rank:
                        rank: string
                        image_address: string
      operationId: get-objects
      description: 建物の種類の一覧を取得する
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
    parameters: []
  '/building/{buildingId}':
    parameters:
      - schema:
          type: string
        name: buildingId
        in: path
        required: true
    get:
      summary: get-building
      tags: []
      operationId: get-object-objectId
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
      description: 指定の建物の情報を取得します。
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  description:
                    type: string
                  rank:
                    type: object
                    properties:
                      rank:
                        type: string
                      image_address:
                        type: string
  /stages:
    get:
      summary: get-stages
      tags: []
      responses:
        '200':
          $ref: '#/components/responses/getStagesResponse'
      operationId: get-stages
      description: ステージ一覧を取得する
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
  '/stage/{stageId}':
    parameters:
      - schema:
          type: string
        name: stageId
        in: path
        required: true
        description: ステージid
    get:
      summary: get-stage
      tags: []
      responses:
        '200':
          $ref: '#/components/responses/getStageResponse'
      operationId: get-stage-stageId
      description: 指定したステージ情報取得
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
  '/stage/{stageId}/steps':
    parameters:
      - schema:
          type: string
        name: stageId
        in: path
        required: true
    get:
      summary: get-steps
      tags: []
      responses:
        '200':
          $ref: '#/components/responses/getStepsResponse'
      operationId: get-stage-stageId-steps
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
  '/stage/{stageId}/step/{stepId}':
    parameters:
      - schema:
          type: string
        name: stageId
        in: path
        required: true
      - schema:
          type: string
        name: stepId
        in: path
        required: true
    get:
      summary: get-step
      tags: []
      responses:
        '200':
          $ref: '#/components/responses/getStepResponse'
      operationId: get-stage-stageId-step-stepId
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
  /me:
    get:
      summary: Get My Info
      tags: []
      responses:
        '200':
          $ref: '#/components/responses/getMeResponse'
      operationId: get-me
      parameters:
        - schema:
            type: string
          in: header
          name: authorization
    put:
      summary: Update My Info
      operationId: put-me
      responses:
        '200':
          $ref: '#/components/responses/updateMeResponse'
      requestBody:
        $ref: '#/components/requestBodies/updateMeRequest'
      parameters:
        - schema:
            type: string
          in: header
          name: authorization
  /map:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          $ref: '#/components/responses/getMapResponse'
      operationId: get-map
      description: 建築済みのオブジェクトなどの現在のマップ上の情報を取得します。
      parameters:
        - schema:
            type: string
          in: header
          name: authorization
  /building:
    head:
      summary: socket build
      operationId: head-build
      responses:
        '200':
          description: OK
      description: websocketです！！！
      requestBody:
        $ref: '#/components/requestBodies/socketBuildingRequest'
      parameters:
        - schema:
            type: string
          in: header
          name: authorization
    parameters: []
components:
  schemas:
    getUserResponse:
      title: getUserResponse
      type: object
      description: ユーザ情報
      x-examples:
        Alice Smith:
          id: 142
          firstName: Alice
          lastName: Smith
          email: alice.smith@gmail.com
          dateOfBirth: '1997-10-31'
          emailVerified: true
          signUpDate: '2019-08-24'
      properties:
        id:
          type: integer
          description: Unique identifier for the given user.
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
          nullable: true
        ms_id:
          type: integer
          format: date
          description: The date that the user was created.
        kinds:
          type: string
      required:
        - id
        - firstName
        - lastName
        - email
    postUserCreateRequest:
      title: postUserCreate
      x-stoplight:
        id: 4n9jdrnyrai7r
      type: object
      properties:
        lastname:
          type: string
        firstname:
          type: string
        email:
          type: string
        password:
          type: string
        ms_id:
          type: string
        kinds:
          type: string
      description: ''
    Building:
      title: Building
      x-stoplight:
        id: raadytanuyaso
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        image_address:
          type: string
        rank:
          type: string
      required:
        - id
        - name
        - description
        - image_address
        - rank
    step:
      title: step
      x-stoplight:
        id: atmw055r61sns
      type: object
      properties:
        id:
          type: string
        stage_id:
          type: string
        title:
          type: string
        description:
          type: string
        'no':
          type: string
      required:
        - id
        - stage_id
        - title
        - description
        - 'no'
    User:
      title: User
      x-stoplight:
        id: 2v7xwecpn62sx
      type: object
      properties:
        id:
          type: integer
        lastname:
          type: string
        firstname:
          type: string
        email:
          type: string
  requestBodies:
    getUserRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              '':
                type: string
    updateMeRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              lastname:
                type: string
              firstname:
                type: string
    socketBuildingRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              building_id:
                type: string
              address:
                type: string
              name:
                type: string
            required:
              - building_id
              - address
              - name
  responses:
    getMeResponse:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: string
              firstname:
                type: string
              lastname:
                type: string
              email:
                type: string
              ms_id:
                type: string
              kinds:
                type: string
              last_clear_step:
                type: object
                required:
                  - step_id
                  - total
                  - cleared
                properties:
                  step_id:
                    type: string
                  total:
                    type: string
                  cleared:
                    type: string
            required:
              - id
              - firstname
              - lastname
              - email
              - ms_id
              - kinds
              - last_clear_step
          examples: {}
    updateMeResponse:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: string
              firstname:
                type: string
              lastname:
                type: string
            required:
              - id
              - firstname
              - lastname
    getStagesResponse:
      description: Example response
      content:
        application/json:
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: string
                title:
                  type: string
                description:
                  type: string
                'no':
                  type: string
                step:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                      title:
                        type: string
                      description:
                        type: string
                      'no':
                        type: string
                    required:
                      - id
                      - title
                      - description
                      - 'no'
              required:
                - id
                - title
                - description
                - 'no'
                - step
    getStageResponse:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: string
              title:
                type: string
              description:
                type: string
              'no':
                type: string
              step:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    title:
                      type: string
                    description:
                      type: string
                    'no':
                      type: string
                  required:
                    - id
                    - title
                    - description
                    - 'no'
            required:
              - id
              - title
              - description
              - 'no'
              - step
    getStepsResponse:
      description: Example response
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/step'
          examples:
            example-1:
              value:
                - id: string
                  stage_id: string
                  title: string
                  description: string
                  'no': string
    getStepResponse:
      description: Example response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/step'
          examples:
            example-1:
              value:
                id: string
                stage_id: string
                title: string
                description: string
                'no': string
    getMapResponse:
      description: Example response
      content:
        application/json:
          schema:
            type: array
            items:
              type: object
              properties:
                coordinate_id:
                  type: string
                user_id:
                  type: string
                address:
                  type: string
                nickname:
                  type: string
                building_id:
                  type: string
                building_name:
                  type: string
                description:
                  type: string
                image_address:
                  type: string
                rank:
                  type: string
              required:
                - coordinate_id
                - user_id
                - address
                - nickname
                - building_id
                - building_name
                - description
                - image_address
                - rank
          examples: {}
    getBuildingResponse:
      description: Example response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Building'
  securitySchemes:
    Authorization:
      name: API Key
      type: apiKey
      in: header
tags:
  - name: building
  - name: map
  - name: stage
  - name: user
