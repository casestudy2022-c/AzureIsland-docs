openapi: 3.0.0
x-stoplight:
  id: wn6i4fn27mv6j
info:
  title: AzureIsland-api
  version: '1.0'
servers:
  - url: 'http://localhost:9000'
paths:
  '/users/{userId}':
    parameters:
      - schema:
          type: integer
        name: userId
        in: path
        required: true
        description: Id of an existing user.
    get:
      summary: Get User Info by User ID
      tags: []
      responses:
        '200':
          description: User Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Get User Alice Smith:
                  value:
                    id: 142
                    firstName: Alice
                    lastName: Smith
                    email: alice.smith@gmail.com
                    dateOfBirth: '1997-10-31'
                    emailVerified: true
                    signUpDate: '2019-08-24'
        '404':
          description: User Not Found
      operationId: get-users-userId
      description: |-
        Azureアイランドユーザ情報取得
        優先度低　未定義
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          description: Bearer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            examples: {}
        description: ''
    delete:
      summary: ''
      operationId: delete-users-userId
      responses:
        '200':
          description: OK
      description: |-
        Azureアイランドユーザ情報削除
        優先度低　未定義
    put:
      summary: ''
      operationId: put-users-userId
      responses:
        '200':
          description: OK
      description: |-
        Azureアイランドユーザ情報修正
        優先度低　未定義
  /user:
    post:
      summary: Create New User
      operationId: post-user
      responses:
        '200':
          description: User Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                New User Bob Fellow:
                  value:
                    id: 12
                    firstName: Bob
                    lastName: Fellow
                    email: bob.fellow@gmail.com
                    dateOfBirth: '1996-08-24'
                    emailVerified: false
                    createDate: '2020-11-18'
        '400':
          description: Missing Required Information
        '409':
          description: Email Already Taken
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                dateOfBirth:
                  type: string
                  format: date
              required:
                - firstName
                - lastName
                - email
                - dateOfBirth
            examples:
              Create User Bob Fellow:
                value:
                  firstName: Bob
                  lastName: Fellow
                  email: bob.fellow@gmail.com
                  dateOfBirth: '1996-08-24'
        description: Post the necessary fields for the API to create a new user.
      description: Create a new user.
  /objects:
    get:
      summary: get-objects
      tags: []
      responses: {}
      operationId: get-objects
      description: 建物の種類の一覧を取得する
  '/object/{objectId}':
    parameters:
      - schema:
          type: string
        name: objectId
        in: path
        required: true
    get:
      summary: get-object
      tags: []
      responses: {}
      operationId: get-object-objectId
  '/build/{objectId}':
    parameters:
      - schema:
          type: string
        name: objectId
        in: path
        required: true
    put:
      summary: put-build-object
      tags: []
      responses: {}
      operationId: put-build-objectId
      description: マップ上にあるオブジェクトを更新するAPI
    delete:
      summary: delete-build-object
      tags: []
      responses: {}
      operationId: delete-build-objectId
      description: ''
    post:
      summary: post-build-object
      tags: []
      responses: {}
      operationId: post-build-objectId
      description: オブジェクトをマップに建設するAPI
    get:
      summary: ''
      operationId: get-build-objectId
      responses:
        '200':
          description: OK
  /stages:
    get:
      summary: get-stages
      tags: []
      responses: {}
      operationId: get-stages
      description: ステージ一覧を取得する
  '/stage/{stageId}':
    parameters:
      - schema:
          type: string
        name: stageId
        in: path
        required: true
    get:
      summary: get-stage
      tags: []
      responses: {}
      operationId: get-stage-stageId
  '/stage/{stageId}/steps':
    parameters:
      - schema:
          type: string
        name: stageId
        in: path
        required: true
    get:
      summary: get-steps
      tags: []
      responses: {}
      operationId: get-stage-stageId-steps
  '/stage/{stageId}/step/{stepId}':
    parameters:
      - schema:
          type: string
        name: stageId
        in: path
        required: true
      - schema:
          type: string
        name: stepId
        in: path
        required: true
    get:
      summary: get-step
      tags: []
      responses: {}
      operationId: get-stage-stageId-step-stepId
  /me:
    get:
      summary: Get My Info
      tags: []
      responses:
        '200':
          $ref: '#/components/responses/getMeResponse'
      operationId: get-me
      parameters:
        - schema:
            type: string
          in: header
          name: authorization
    put:
      summary: Update My Info
      operationId: put-me
      responses:
        '200':
          $ref: '#/components/responses/updateMeResponse'
      requestBody:
        $ref: '#/components/requestBodies/updateMeRequest'
      parameters:
        - schema:
            type: string
          in: header
          name: authorization
components:
  schemas:
    getUserResponse:
      title: getUserResponse
      type: object
      description: ユーザ情報
      x-examples:
        Alice Smith:
          id: 142
          firstName: Alice
          lastName: Smith
          email: alice.smith@gmail.com
          dateOfBirth: '1997-10-31'
          emailVerified: true
          signUpDate: '2019-08-24'
      properties:
        id:
          type: integer
          description: Unique identifier for the given user.
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
          nullable: true
        ms_id:
          type: integer
          format: date
          description: The date that the user was created.
        kinds:
          type: string
      required:
        - id
        - firstName
        - lastName
        - email
    postUserCreateRequest:
      title: postUserCreate
      x-stoplight:
        id: 4n9jdrnyrai7r
      type: object
      properties:
        lastname:
          type: string
        firstname:
          type: string
        email:
          type: string
        password:
          type: string
        ms_id:
          type: string
        kinds:
          type: string
  requestBodies:
    getUserRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              '':
                type: string
    updateMeRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              lastname:
                type: string
              firstname:
                type: string
    getStagesRequest:
      content:
        application/json:
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: string
                title:
                  type: string
                description:
                  type: string
                'no':
                  type: string
                '':
                  type: string
  responses:
    getMeResponse:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: string
              firstname:
                type: string
              lastname:
                type: string
              email:
                type: string
              ms_id:
                type: string
              kinds:
                type: string
              last_clear_step:
                type: object
                properties:
                  step_id:
                    type: string
                  total:
                    type: string
                  cleared:
                    type: string
          examples: {}
    updateMeResponse:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: string
              firstname:
                type: string
              lastname:
                type: string
